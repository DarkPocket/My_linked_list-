#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>

#include"linkList.h"


/*
链表有头节点
   影响 遍历和计算长度

cpp还是c 影响快排代码
        cpp      return &tmpHead;
        c        return tmpHead.pNext;
*/



struct NODE
{
        int num;
        int data;
        int val;
        char ch[100];



        struct NODE *pNext;

} node, *pnode;


/*
typedef struct ListNode
{
        int num;
        int data;
        int val;
        char ch[100];


        // struct node *pNext;
        ListNode *pNext;

}  ;
*/

struct NODE *Create_plist();
struct NODE *Create_Null_plist() ;
void traverse_list(struct NODE * );
int is_empty(struct NODE * );
int length_list(struct NODE * );
int insert_list(struct NODE *pHead, int newstr, int x);// 在第i个链表前面插入 新节点   值为x

int delete_list(struct NODE *pHead, int j, int *x) ; //删除j节点后面的节点

int CopyListNode ( struct  NODE * Copy_pHead, struct  NODE * qHead );

void Bublle_sort_list(struct NODE *  );
int add_list(struct NODE *pHead, struct NODE *qList) ;

void ListDestroy(struct NODE*head);
//链表快排算法
struct NODE* partitionList( struct NODE* lowPre,  struct NODE* low,  struct NODE* high);
void qsortList( struct NODE *headPre,  struct NODE*head,  struct NODE*tail);
struct NODE *quickSortList( struct NODE *head);



// 创建 链表
struct NODE *Create_plist()
{
        int len;
        int i = 0;
        int val = 0; //临时存放数据
        // 头节点
        struct NODE *pHead = (struct NODE *)malloc(sizeof(struct NODE));
        if (pHead == NULL)
        {
                printf("创建链表失败，终止 \n");
                exit(-1);
        }
        // 尾节点
        struct NODE *pTail = pHead;
        pTail->pNext = NULL;



        printf("输入需要生成的链表节点个数 \n");
        scanf("%d", &len);

        for (i = 0; i < len; i++)
        {
                printf("输入第%d个节点值 \n", i);
                scanf("%d", &val);

                struct NODE *pNew = (struct NODE *)malloc(sizeof(struct NODE));
                if (pNew == NULL)
                {
                        printf("创建链表节点失败，终止 \n");
                        exit(-1);
                }

                pNew->data = val;
                pTail->pNext = pNew;
                pNew->pNext = NULL;
                pTail = pNew; //尾节点



        }
        return pHead;

}


struct NODE *Create_Null_plist()
{
        int len;
        int i = 0;
        int val = 0; //临时存放数据
        // 头节点
        struct NODE *pHead = (struct NODE *)malloc(sizeof(struct NODE));
        if (pHead == NULL)
        {
                printf("创建链表失败，终止 \n");
                exit(-1);
        }
        // 尾节点
        struct NODE *pTail = pHead;
        pTail->pNext = NULL;

        return pHead;

}

void traverse_list(struct NODE *pHead)
{
        struct NODE *p = pHead ;//->pNext;
        if ( p == NULL )
        {
                printf("链表 NULL \n");
                return ;
        }
        while ( NULL != p)
        {
                printf("地址   %p ", p);

                printf("  val  %4d  data %2d \n" , p->val , p->data);

                p = p->pNext;
        }
        printf("  \n");
        return ;

}


// 链表是否为空
int is_empty(struct NODE *pHead)
{
        if ( pHead->pNext == NULL )
        {
                return 1;
        }
        else
        {
                return 0;
        }

}

int length_list(struct NODE *pHead)
{
        int len = 0;
        struct NODE *p = pHead->pNext;

        while ( NULL != p)
        {
                len++;
                p = p->pNext;
        }
        printf(" 链表len=%d \n", len);
        return len;

}

// 在第i个链表前面插入 新节点   值为x
int insert_list(struct NODE *pHead, int newstr, int x)
{
        int i = 0;
        struct NODE *p = pHead;
        struct NODE *q;
        while (NULL != p && i < newstr - 1)
        {
                p = p->pNext;
                i++;

        }
        if (i > newstr - 1 || NULL == p)
        {
                return -1;
        }


        struct NODE  *pNew = (struct NODE *)malloc(sizeof(struct NODE));
        if (NULL == pNew)
        {
                printf("创建链表节点失败，终止 \n");
                return -2;
                //   exit(-1);
        }
        pNew->data = x;

        q = p->pNext;
        p->pNext = pNew;
        pNew->pNext = q;

        return 1;

}


//删除j节点后面的节点
int delete_list(struct NODE *pHead, int j, int *x)
{
        int i = 0;
        struct NODE *p = pHead, *s;
        struct NODE *q;
        while (NULL != p->pNext && i < j - 1)
        {
                p = p->pNext;
                i++;

        }
        if (i > j - 1 || NULL == p->pNext)
        {
                return -1;
        }

        //  pNew->data = x;
        q = p->pNext;
        *x = q->data;
        //删除p节点后面的节点

        s = p->pNext;
        p->pNext = s->pNext;
        free(q);
        q = NULL;

        return 1;

}
/*

*功能：删除链表的i个结点
*参数1：链表的头结点
*参数2：指定第i个结点

int deleteLinkListNode(linkList head,int i)
{
  int j=0;
  pNode prePnode=head;
  pNode pnode=head->next;

  while(pnode!=NULL&&j<i-1)
  {
          prePnode=pnode;
          pnode=pnode->next;
      j++;
  }
  if(pnode==NULL)
  {
          printf("!!!!!!!!删除结点时位置已经超出了链表!!!!!!!!\n");
          return -1;
  }
  prePnode->next=pnode->next;
  pnode->next=NULL;
  free(pnode);
  return 0;
}
//删除链表函数调用删除结点函数和遍历链表函数
int deleteLinklist(linkList head)
{
        int i=0;
    int lenth=linkListTraverse(head);
    for(i=lenth;i>0;i--)
        {
        deleteLinkListNode(head,i);
        }
        return 0;
}

*/

int CopyListNode ( struct  NODE * Copy_pHead, struct  NODE * qHead )
{
        //by black


        *qHead = *Copy_pHead;



        Copy_pHead = Copy_pHead->pNext;

        struct NODE   *pTail = qHead;

        printf("复制链表中\n" );

        while ( NULL != Copy_pHead)
        {

                struct  NODE *pNew = (struct  NODE *)malloc(sizeof(struct  NODE));

                *pNew = *Copy_pHead;


                pNew->pNext = NULL;

                printf("复制 val  %4d  data %2d \n", pNew->val , pNew->data);
                //    getchar();
                pTail->pNext = pNew;
                pTail = pNew;
                Copy_pHead = Copy_pHead->pNext;


        }

        return 0;
}







void Bublle_sort_list(struct NODE *pHead )
{
        int i, j, t;
        struct NODE *p, *q;
        int len;
        len = length_list(pHead);
        i = j = t = 0;


        for (i = 0, p = pHead->pNext; i < len - 1; i++, p = p->pNext)
        {
                for (j = i + 1, q = p->pNext; j < len; j++, q = q->pNext)
                {
                        if (p->data > q->data)
                        {
                                t = p->data;
                                p->data = q->data;
                                q->data = t;
                        }


                }
        }

        return ;

}

int add_list(struct NODE *pHead, struct NODE *qList)  //添加节点
{

        int i = 0;
        struct NODE *p = pHead;

        while ( NULL != p->pNext)
        {

                p = p->pNext;
        }

        struct NODE *pNew = (struct NODE *)malloc(sizeof(struct NODE));
        if (pNew == NULL)
        {
                printf("创建链表节点失败，终止 \n");
                exit(-1);
        }


        *pNew = *qList;

        p->pNext = pNew;

        pNew->pNext = NULL;



        return 0;
}





//销毁链表
void ListDestroy2(struct NODE*head)
{
        //有问题 无法实现销毁
        struct NODE *p, q;

        p = head;


        if (  NULL == head->pNext)
        {
                printf("  链表 NULL \n" );
                return  ;
        }

        while (head != NULL)
        {
                p = head;
                head = head->pNext;

                printf("%p  删除 链表节点  %d  %d  \n", p, p->val, p->data);
                free(p);

                p = NULL;
        }


        return ;
}


void ListDestroy(struct NODE*head)
{
        struct NODE *p, *q;
        //
        p = head;
        if (  NULL == head->pNext)
        {
                printf("  链表 NULL \n" );
                return  ;
        }

        while (p->pNext != NULL)
        {
                q = p->pNext;
                p->pNext = q->pNext;
                free(q);
        }
        free(p);

        p = NULL;

        return ;
}


struct NODE* partitionList( struct NODE* lowPre,  struct NODE* low,  struct NODE* high)
{
        //链表范围是[low, high)
        int key = low->val; //排序标准
        struct NODE node1, node2;//比key小的链的头结点，比key大的链的头结点
        struct NODE* little = &node1, *big = &node2;
        struct NODE*i;
        for (  i = low->pNext; i != high; i = i->pNext)
                if (i->val < key)
                {
                        little->pNext = i;
                        little = i;
                }
                else
                {
                        big->pNext = i;
                        big = i;
                }
        big->pNext = high;//保证子链表[low,high)和后面的部分连接
        little->pNext = low;
        low->pNext = node2.pNext;
        lowPre->pNext = node1.pNext;//为了保证子链表[low,high)和前面的部分连接
        return low;
}

void qsortList( struct NODE *headPre,  struct NODE*head,  struct NODE*tail)
{
        //链表范围是[low, high)
        if (head != tail && head->pNext != tail)
        {
                struct NODE* mid = partitionList(headPre, head, tail);//注意这里head可能不再指向链表头了
                qsortList(headPre, headPre->pNext, mid);
                qsortList(mid, mid->pNext, tail);
        }
}

struct NODE *quickSortList( struct NODE *head)
{
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        //链表快速排序
        if (head == NULL || head->pNext == NULL)
        {
                return head;
        }
        struct NODE tmpHead;
        tmpHead.pNext = head;
        qsortList(&tmpHead, head, NULL);
        //    return &tmpHead;
        return tmpHead.pNext;
}





int fun2 (  )
{
        // ListNode *pHead = (ListNode *)malloc(sizeof(ListNode));

        struct NODE *pHead = (  struct NODE *)malloc(sizeof(  struct NODE));
        int len = 0;
        int i = 0;

        pHead = Create_Null_plist();
        //   Create_plist();

        //  ListNode   *pTail = pHead;
        struct NODE *pTail = pHead;
        len = 14;
        for (i = 0; i < len; i++)
        {
                //  printf("输入第%d个节点值 \n", i);
                //  scanf("%d", &val);
                //  ListNode *pNew = (ListNode *)malloc(sizeof(ListNode));
                struct NODE *pNew = (  struct NODE *)malloc(sizeof(  struct NODE));

                if (pNew == NULL)
                {
                        printf("创建链表节点失败，终止 \n");
                        exit(-1);
                }

                pNew->data = len - i;
                pNew->val = 2 * i * i * i - 15 * i * (i + 5) + 7 * i + 38;

                pTail->pNext = pNew;
                pNew->pNext = NULL;
                pTail = pNew; //尾节点

        }

        printf("  traverse_list  pHead \n");
        traverse_list(pHead);
        length_list(pHead);

        //         ListNode *p  ;
        struct NODE *p = NULL  ;
        //  ListNode *q = (ListNode *)malloc(sizeof(ListNode));
        struct NODE*q = (  struct NODE *)malloc(sizeof(  struct NODE));


        p  =  quickSortList(pHead->pNext);
        printf(" quickSortList   pheand \n");
        traverse_list(pHead );

        q->pNext = p;

        traverse_list(q );
        //   traverse_list(q );
        printf("len q \n");

        length_list(q);


        printf(" Destroy  q \n");
        ListDestroy(q);
        length_list(q);


        /*
        printf(" Destroy  q \n");
        ListDestroy(q);

        printf(" traverse_list   q \n");
        traverse_list(q );
        printf("len q \n");
        length_list(q);


        printf(" Destroy  phead \n");
        ListDestroy(pHead);
        printf(" traverse_list   pheand \n");
        traverse_list(pHead );

        printf("len pHead \n");
        length_list(pHead);


        */












        return 0;

}


int main (void)
{
        //  fun();
        fun2();

        return  0;
}





/*
int Clear_list(struct NODE *pHead)
{
        // 把链表从末尾开始释放节点
        //清除pHead链表
        //失败
        //by black

        struct NODE *qLoca = pHead  ;
        struct NODE *p = pHead;


        if (  NULL == p->pNext)
        {
                return -1;
        }

        // free(p);

        while (qLoca->pNext != NULL)
        {
                p = qLoca;
                printf("删除 链表节点  %d  %d  \n",  p->val, p->data);
                qLoca = qLoca->pNext;

                free(p);
                p = NULL;

        }

        return 0;
}
*/

int fun (  )
{

        struct NODE *pHead = NULL;
        int newstr;
        int x;
        pHead = Create_plist();

        printf("   traverse_list(pHead); \n");
        Bublle_sort_list(pHead);
        //sortlist(pHead);
        traverse_list(pHead);
        /*
                if (is_empty(pHead))
                                printf("  链表为空 \n");
                else
                {
                        printf("  链表不空 \n");
                        }
        */

        printf("在第i个节点前面插入x值\n");
        //   scanf("%d %d",&newstr,&x);
        //   insert_list(pHead, newstr,  x);
        if ( delete_list(pHead, 3, &x))
        {
                printf("删除成功，删除的为%d\n", x);

        }
        else
        {
                printf("删除失败 \n");

        }
        length_list(pHead);
        Bublle_sort_list(pHead);
        traverse_list(pHead);


        ListDestroy(pHead);


        traverse_list(pHead);
        length_list(pHead);

        printf("over \n");
        return  0;

}



